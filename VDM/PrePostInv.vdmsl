module PrePostInv
exports all
definitions 

values
MIN : nat = 10;
MAX : nat = 100;

types
-- T1 = {MIN...}
T1 = nat
inv m == m >= MIN;

-- T2 = {0,...,MAX}
T2 = nat
inv m == m <= MAX;

-- T1 inter T2 = {MIN,...,MAX}

--complicated nat1
MyLoop = nat
inv m == loop(m) > 1;

functions

-- the following 'MyLoop' should be replaced with 'nat' -- will lead to a stack overflow
loop: MyLoop -> nat
loop(m) == m+1
--pre loop(m) > 1 will stack overflow!
;

-- this method simply returns 't'
-- example of implicit type invariant check 
std: T1 -> nat
std(t) == t
-- the following commented code is if instead of T1 as input, we used 'nat' instead 
-- as we *are* using T1, the following code is implicit 
--pre
--	t >= 0
--	and
--	inv_T1(t)
--post
--RESULT >= 0
;

h: nat -> T1
h(x) == x -- +1
--pre x >= 0 -- nat means must be greater than or equal to 0, this is an implicit check 
pre (x-MIN) > MAX -- x > MIN+MAX 
--post inv_T1(x) 
post x = RESULT; 

-- f(-1) = violates inv_Type(x)				  (i.e. nat)
-- f(0)  = violates pre_f_pred(x)		    (i.e. x>0)
-- f(11) = violates inv_T1(RESULT)   (i.e. nat)
-- f(101)= violates inv_T2(RESULT) (i.e. x>10)
-- f(110)= vilates pre_h(RESULT)			  (i.e. (x-10>100)
-- f(111)= violates post_h(x,RESULT)		(x=RESULT, when +1)
-- f(111)= violates post_f(x,RESULT)		(h(x)=RESULT, h(x)=x<>RESULT)
-- pre_f(x) == inv_Type(x) and pre_f_pred(x) 
-- post_f(x) == inv_Type(x) and inv_Type(RESULT) and
--							 inv_T1(RESULT) and pre_h(RESULT) and
--							 post_h(x, RESULT) and post_f_pred(x, RESULT)
f : nat -> T2
f(x) == x - MAX -- while this is just x-100, there are a lot of implicit checks 
pre 
	--x >= 0
	--and
	x > 0
	--and
	--pre_h(x) -- must check that the preconditions for 'h' pass, otherwise the result would fail 
--post h(x) ? RESULT --and 
post 
	-- inv_T2(RESULT) -- check that the invariant of T2 holds for the result
	-- essentially checking:
	--RESULT >= 0 and RESULT <= MAX
	--and
	RESULT < h(x)
;

-- forall x : nat & pre_f(x) => exists r: T2 & h(x) = r
-- forall x : nat & pre_f(x) => h(x) = x-MAX

g(x : int) r: T1
post r > x;

sqrt(x: nat) r: real
post r*r = x;

-- forall x: int & pre_g(x) => exist r: T1 & r > x

state Test of
	x: nat
	y: nat
inv mk_Test(x,-) == x > 10
init stt == stt = mk_Test(20,10)
end


operations 

imp(i: int) r: T1
pre i > 0
post r > i;

exp : int ==> int
exp(i) == (x := x + 1; return x)
pre i > 0
post x > x~;

extexp(i: int) r: int == (x := x+y; return x)
ext wr x rd y
pre i > 0
post x > x~ and r = x;

end PrePostInv